<?php
/**
 * @file
 * Code for the social_dashboard feature.
 */

include_once 'social_dashboard.features.inc';

/**
 * Implements Elysia hook_cronapi().
 */
function social_dashboard_cronapi() {
  return array(
    'social_dashboard_twitter_cron' => array(
      'description' => 'Download twitter tweets',
      'rule' => '*/5 * * * *',
    ),
  );
}

/**
 * Implements hook_views_plugins().
 */
function social_dashboard_views_plugins() {
  $module_path = drupal_get_path('module', 'social_dashboard');

  return array(

    'style' => array(
      'social_dashboard_column_plugin_style' => array(
        'title' => t('Social Dashboard Columns'),
        'help' => t('Social Dashboard Columns Style'),

        'path' => $module_path . '/plugins/column',
        'handler' => 'SocialDashboardColumnPluginStyle',

        'parent' => 'default',

        'theme' => 'social_dashboard_column_plugin_style',
        'theme path' => $module_path . '/templates/column',

        'theme file' => 'theme.inc',
        'uses row plugin' => TRUE,
        'uses grouping' => FALSE,
        'uses options' => TRUE,
        'type' => 'normal',
      ),
    ),

    'row' => array(
      'social_dashboard_column_plugin_rows' => array(
        'title' => t('Social Dashboard Column'),
        'help' => t('Social Dashboard rows.'),

        'path' => $module_path . '/plugins/column',
        'handler' => 'SocialDashboardColumnPluginRows',

        'theme' => 'social_dashboard_column_plugin_rows',
        'theme path' => $module_path . '/templates/column',

        'theme file' => 'theme.inc',
        'uses fields' => TRUE,
        'uses options' => TRUE,
        'type' => 'normal',
      ),
    ),
  );
}

function social_dashboard_views_post_render(&$view, &$output, &$cache) {
  if ($view->name == 'social_dashboard' && $view->current_display != 'block_1') {
    $social_link = url('media-centre/social-media-centre', ['query' => ['source' => $view->current_display]]);
    $output = str_replace('__social_link__', $social_link, $output);
  }
}

/**
 * Implements hook_views_query_alter().
 */
function social_dashboard_views_query_alter(&$view, &$query) {
  if ($view->name == 'social_dashboard' && $view->current_display != 'block_1') {
    $map = array();
    $map['twitter'] = variable_get('social_twitter_selected_tag', '');

    foreach ($map as $source => $selected_tag) {
      if (isset($_REQUEST['source']) && $_REQUEST['source'] && $source != $_REQUEST['source']) {
        continue;
      }
      $condition_group = [
        'conditions' => [],
        'args' => [],
        'type' => 'AND',
      ];
      if ($selected_tag) {
        $condition_group['conditions'][] = [
          'field' => 'dashboard_item.tags',
          'value' => '%' . $selected_tag . ',%',
          'operator' => 'LIKE',
        ];
      }
      $condition_group['conditions'][] = [
        'field' => 'dashboard_item.source',
        'value' => $source,
        'operator' => '=',
      ];
      if ($source != $view->current_display) {
        $query->where[1]['conditions'][0]['value'] = 'empty';
        continue;
      }
      $query->where[] = $condition_group;
    }
  }
}

/**
 * Implements hook_menu().
 */
function social_dashboard_menu() {
  return array(
      'admin/config/media/social-dashboard/twitter' => array(
        'title' => 'Twitter',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('social_dashboard_social_twitter_form'),
        'access callback' => 'user_access',
        'access arguments' => array('administer social dashboard'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'social_dashboard.admin.inc',
        'module' => 'social_dashboard',
      ),

    'admin/config/media/social-dashboard' => array(
      'title' => 'Dashboard Settings',
      'description' => 'Configure social dashboard Twitter Settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('social_dashboard_settings_form'),
      'access callback' => 'user_access',
      'access arguments' => array('administer social dashboard'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'social_dashboard.admin.inc',
      'module' => 'social_dashboard',
    ),

    'admin/config/media/social-dashboard/settings' => array(
      'title' => 'Dashboard Settings',
      'description' => 'Configure social dashboard Twitter Settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('social_dashboard_settings_form'),
      'access callback' => 'user_access',
      'access arguments' => array('administer social dashboard'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'file' => 'social_dashboard.admin.inc',
      'module' => 'social_dashboard',
    ),

    );
}

/**
 * Implements hook_entity_info().
 */
function social_dashboard_entity_info() {

  $entity_info['dashboard_item'] = array(
    'label' => t('Dashboard item'),
    'entity class' => 'Entity',
    'controller class' => 'DashboardItemEntityController',
    'base table' => 'dashboard_item',
    'fieldable' => TRUE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'dashboard_item_id',
      'label' => 'title',
      'name' => 'name',
    ),
    'static cache' => TRUE,
    'module' => 'social_dashboard',
    'access callback' => 'social_dashboard_admin_access',
    'views controller class' => 'EntityDefaultViewsController',
    'bundles' => array(
      // Entity defaults to entity type for single bundles.
      'dashboard_item' => array(
        'label' => t('Dashboard item'),
      ),
    ),
  );

  return $entity_info;
}

/**
 * Implements hook_permission().
 */
function social_dashboard_permission() {
  return array(
    'view social dashboard' => [
      'title' => t('View social dashboard'),
      'description' => 'Allows a user view dashboard',
    ],
    'administer dashboard items' => [
      'title' => t('Administer dashboard items'),
      'description' => 'Allows a user administer dashboard items',
    ],
    'administer social dashboard' => [
      'title' => t('Administer social dashboard'),
      'description' => t('Allows a user to add, edit, and delete dashboard items.'),
    ],
  );
}

/**
 * Checks access for user for social_dashboard.
 *
 * @return
 *  True if user has access, false if they don't.
 */
function social_dashboard_admin_access() {
  return user_access('administer dashboard items');
}

/**
 * Implement hook_theme().
 */
function social_dashboard_theme() {
  return array(
    'embedded_twitter_tweet' => array(
      'render element' => 'element',
      'template' => 'templates/embedded-twitter-tweet',
      'variables' => array('content'),
      'path' => drupal_get_path('module', 'social_dashboard'),
    ),
  );
}

function social_dashboard_twitter_cron() {
  $library_path = (module_exists('libraries') && libraries_get_path('twitter')) ? libraries_get_path('twitter') : 'sites/all/libraries/twitter';
  require_once $library_path . '/TwitterAPIExchange.php';
  $selected_tag = variable_get('social_twitter_selected_tag', '');

  $consumer_key = variable_get('social_twitter_consumer_key', '');
  $consumer_secret = variable_get('social_twitter_consumer_secret', '');
  $oauth_access_token = variable_get('social_twitter_oauth_access_token', '');
  $oauth_access_token_secret = variable_get('social_twitter_oauth_access_token_secret', '');

  if (!$consumer_key || !$consumer_secret || !$oauth_access_token || !$oauth_access_token_secret) {
    return;
  }

  $screen_name = variable_get('social_twitter_screen_name', '');
  $count = variable_get('social_dashboard_limit', 20);
  $items = social_dashboard_get_stored_items('twitter');
  $getfield = '?tweet_mode=extended&include_entities=true&include_rts=true&screen_name=' . $screen_name . '&count=' . $count;
  $url = 'https://api.twitter.com/1.1/statuses/user_timeline.json';
  $requestMethod = 'GET';
  $twitter = new TwitterAPIExchange(
    [
      'consumer_key' => $consumer_key,
      'consumer_secret' => $consumer_secret,
      'oauth_access_token' => $oauth_access_token,
      'oauth_access_token_secret' => $oauth_access_token_secret,
    ]
  );
  $response = $twitter->setGetfield($getfield)->buildOauth($url, $requestMethod)->performRequest();
  $tweets = json_decode($response, TRUE);
  $offset = 0;
  foreach ($tweets as $tweet) {
    $entity_id = NULL;
    $content = substr($tweet['full_text'], 0, 255);
    $id_str = $tweet['id_str'];
    $name = $tweet['user']['screen_name'];
    $timestamp = strtotime($tweet['created_at']);

    $visible = FALSE;
    $tags = [];
    foreach ($tweet['entities']['hashtags'] as $hashtag) {
      $tags[] = '#' . $hashtag['text'];
      if ($selected_tag == '#' . $hashtag['text']) {
        $visible = TRUE;
      }
    }
    $tags = implode(',', $tags);
    if ($tags) {
      $tags .= ',';
    }
    if (@$items[$id_str]) {
      $entity_id = $items[$id_str];
    }
    if ($visible) {
      $weight = date('Ymd') . (9999 - $offset++);
    }
    else {
      $weight = date('Ymd') . '1000';
    }
    social_dashboard_create_dashboard_item($entity_id, $id_str, 'twitter', $name, $content, $tags, $weight, $timestamp);
  }
  if (!count($tweets)) {
    watchdog('social_dashboard', '[CRON]Error no twitter tweets found!');
  }
  return count($tweets);
}

function social_dashboard_create_dashboard_item($entity_id, $social_id, $source, $name, $content, $tags, $weight = 0, $timestamp = NULL, $variables = NULL) {
  $content = drupal_substr(social_dashboard_remove_utf8mb4(check_plain($content)), 0, 200);
  if ($entity_id) {
    $entities = entity_load('dashboard_item', [$entity_id]);
    $entity = $entities[$entity_id];
    $entity->social_id = $social_id;
    $entity->name      = $name;
    $entity->source    = $source;
    $entity->content   = $content;
    $entity->tags      = $tags;
    $entity->weight    = $weight;
    $entity->timestamp = $timestamp;
    $entity->variables = serialize($variables);
  }
  else {
    $entity = entity_create('dashboard_item', [
      'social_id' => $social_id,
      'source'    => $source,
      'name'      => $name,
      'content'   => $content,
      'tags'      => $tags,
      'weight'    => $weight,
      'timestamp' => $timestamp,
      'variables' => serialize($variables),
    ]
    );
  }
  $entity->save();
  return $entity;
}

function social_dashboard_get_stored_items($source) {
  $result = db_query("SELECT * FROM {dashboard_item} di WHERE di.source IN (:source)", array(':source' => $source));
  $items = [];
  foreach ($result as $item) {
    $items[$item->social_id] = $item->dashboard_item_id;
  }
  return $items;
}

function social_dashboard_remove_utf8mb4($text) {
  // Strip overly long 2 byte sequences, as well as characters
  //  above U+10000 and remove it
  $processed_text = preg_replace(
    '/[\x00-\x08\x10\x0B\x0C\x0E-\x19\x7F]' .
    '|[\x00-\x7F][\x80-\xBF]+' .
    '|([\xC0\xC1]|[\xF0-\xFF])[\x80-\xBF]*' .
    '|[\xC2-\xDF]((?![\x80-\xBF])|[\x80-\xBF]{2,})' .
    '|[\xE0-\xEF](([\x80-\xBF](?![\x80-\xBF]))|(?![\x80-\xBF]{2})|[\x80-\xBF]{3,})/S',
    '', $text);

  // Strip overly long 3 byte sequences and UTF-16 surrogates and delete with ''
  $processed_text = preg_replace('/\xE0[\x80-\x9F][\x80-\xBF]' . '|\xED[\xA0-\xBF][\x80-\xBF]/S', '', $processed_text);
  return $processed_text;
}
