<?php
/**
 * @file
 * Code for the HWC Good Practice Exchange feature.
 */

include_once 'hwc_good_practice_exchange.features.inc';

/**
 * Implements hook_menu().
 */
function hwc_good_practice_exchange_menu() {
  $items['document_file/%file'] = array(
    'title' => 'Download file',
    'page callback' => 'hwc_good_practice_exchange_download_file',
    'page arguments' => array(1),
    'access callback' => 'hwc_good_practice_exchange_download_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'weight' => 4,
  );
  return $items;
}
/**
 * Implements hook_form_FORM_ID_alter().
 */
function hwc_good_practice_exchange_form_document_node_form_alter(&$form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'hwc_good_practice_exchange') . '/css/hwc_good_practice_exchange.css');
}

function hwc_good_practice_exchange_download_access($file) {
  global $user;

  $inter_roles = array_intersect($user->roles, [
    HWC_ROLE_ADMIN,
    HWC_ROLE_CAMPAIGN_PARTNER,
    HWC_ROLE_EEN_REVIEW_MANAGER,
    HWC_ROLE_EXTERNAL_PROVIDER_SUPERVISOR,
    HWC_ROLE_GPE_PLATFORM_EDITORS,
    HWC_ROLE_HWC_STAFF_REVIEWERS,
    HWC_ROLE_WEBSITE_MANAGERS,
    HWC_ROLE_SUPERADMIN,
  ]);
  if (!empty($inter_roles)) {
    return NODE_ACCESS_ALLOW;
  }
  return NODE_ACCESS_IGNORE;
}

function hwc_good_practice_exchange_download_file($file) {
  $headers = array(
    'Content-Type'              => $file->filemime,
    'Content-Disposition'       => 'attachment; filename="' . drupal_basename($file->uri) . '"',
    'Content-Length'            => $file->filesize,
    'Content-Transfer-Encoding' => 'binary',
    'Pragma'                    => 'no-cache',
    'Cache-Control'             => 'must-revalidate, post-check=0, pre-check=0',
    'Expires'                   => '0',
    'Accept-Ranges'             => 'bytes',
  );
  file_transfer($file->uri, $headers);
}

function hwc_good_practice_exchange_get_partner_title($nid) {
  static $titles = [];
  if (!isset($titles[$nid])) {
    $node = node_load($nid);
    $titles[$nid] = $node->title;
  }
  return $titles[$nid];
}

function hwc_good_practice_exchange_get_document_partner_types_map() {
  $term_voc = taxonomy_vocabulary_machine_name_load('document_partner_type');
  $terms = taxonomy_term_load_multiple(array(), array('vid' => $term_voc->vid));
  $map = [];
  foreach ($terms as $term) {
    $map[$term->field_partner_type_code[LANGUAGE_NONE][0]['value']] = $term->tid;
  }
  return $map;
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function hwc_good_practice_exchange_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  global $language;

  if ((arg(0) != 'good-practice-exchange-platform')) {
    return;
  }

  $share_partner_type_id = FALSE;
  $partner_type = hwc_good_practice_exchange_user_get_partner_type();
  if ($partner_type) {
    $map = hwc_good_practice_exchange_get_document_partner_types_map();
    $share_partner_type_id = $map[$partner_type];
  }

  if (arg(0) == 'good-practice-exchange-platform') {
    // EU-OSHA communications. section = generic public.
    $cond1 = [];
    $cond1[] = '(is_partner_section:"1")';
//    $cond1[] = '((ss_language:"und") OR (ss_language:"' . $language->language . '"))';
    if ($share_partner_type_id) {
      $cond1[] = '(im_field_share_partner_type:"' . $share_partner_type_id . '")';
    }
    $fq1 = implode(' AND ', $cond1);

    $cond2 = [];
    $cond2[] = '(is_partner_section:"0")';
//    $cond2[] = '((ss_language:"und") OR (ss_language:"' . $language->language . '"))';
    if ($partner_type) {
      $cond2[] = '(is_partner_category_type:"' . $partner_type . '")';
    }
    $fq2 = implode(' AND ', $cond2);

    $all_tid = variable_get('field_share_partner_type_all_tid', 0);
    // all types tid...
    $cond3 = [];
    $cond3[] = '(is_partner_section:"1")';
//    $cond3[] = '((ss_language:"und") OR (ss_language:"' . $language->language . '"))';
    $cond3[] = '(im_field_share_partner_type:"' . $all_tid . '")';
    $fq3 = implode(' AND ', $cond3);

    $call_args['params']['fq'][] = '(' . $fq1 . ') OR (' . $fq2 . ') OR (' . $fq3 . ')';
  }

  $call_args['params']['sort'] = 'ds_field_publication_date desc';
  $sort_by = strtolower(@$_REQUEST['sort_by']);
  $sort_order = strtolower(@$_REQUEST['sort_order']);
  if ($sort_by) {
    $call_args['params']['sort'] = 'ds_field_publication_date ';
    if ($sort_by == 'title2') {
      $call_args['params']['sort'] = 'sort_title2  ';
    }
    if (!in_array($sort_order, ['asc', 'desc'])) {
      $sort_order = 'desc';
    }
    $call_args['params']['sort'] .= $sort_order;
  }
}

/**
 * Implements hook_facet_items_alter().
 */
function hwc_good_practice_exchange_facet_items_alter(&$build, $settings) {
  if ($settings->facet == "partner_organisation") {
    foreach ($build as $nid => $item) {
      if (intval($nid) > 0) {
        $node = node_load($nid);
        $build[$nid]['#markup'] = $node->title;
      }
      if (intval($nid) == -1) {
        $build[$nid]['#markup'] = t('EU-OSHA');
      }
    }
  }
}

/**
 * Document partner term tid.
 */
function hwc_good_practice_exchange_node_get_workbench_access_tid($item) {
  if ($item->type != 'document') {
    return '';
  }
  $q = db_select('workbench_access_node', 'w');
  $q->fields('w', ['access_id'])
    ->condition('w.nid', $item->nid);
  $q->condition('w.access_id', 'section', '!=');
  return $q->execute()->fetchField();
}

/**
 * Document partner node.
 */
function hwc_good_practice_exchange_node_get_workbench_partner($item) {
  static $nodes = [];
  $tid = hwc_good_practice_exchange_node_get_workbench_access_tid($item);
  if (!$tid) {
    return NULL;
  }
  if (isset($nodes[$tid])) {
    return $nodes[$tid];
  }
  $q = db_select('workbench_access_node', 'w');
  $q->innerJoin('node', 'n', 'w.nid = n.nid');
  $q->fields('w', ['nid'])
    ->condition('w.access_id', $tid)
    ->condition('n.type', 'partner', '=');
  $nid = $q->execute()->fetchField();
  $nodes[$tid] = node_load($nid);
  return $nodes[$tid];
}

/**
 * Document partner category type tid.
 */
function hwc_good_practice_exchange_node_get_partner_category_type($item) {
  $partner = hwc_good_practice_exchange_node_get_workbench_partner($item);
  if (!$partner) {
    return NULL;
  }
  $wrapper = entity_metadata_wrapper('node', $partner);
  $partner_type = $wrapper->field_partner_type->value();
  if (!$partner_type) {
    return NULL;
  }
  return $partner_type->tid;
}

/**
 * User partner partner type tid.
 */
function hwc_good_practice_exchange_user_get_partner_type() {
  global $user;

  if (empty($user->workbench_access)) {
    workbench_access_user_load_data($user);
  }
  if (in_array(HWC_ROLE_CAMPAIGN_PARTNER, $user->roles) && !empty($user->workbench_access)) {
    $sections = array_keys($user->workbench_access);
    foreach ($sections as $id_section) {
      if ($partner = hwc_partner_by_section_id_load($id_section)) {
        $wrapper = entity_metadata_wrapper('node', $partner);
        if ($wrapper->field_partner_type->value()) {
          return $wrapper->field_partner_type->value()->tid;
        }
      }
    }
  }
  return NULL;
}

/**
 * Document partner organisation nid.
 */
function hwc_good_practice_exchange_node_get_partner_organisation($item) {
  $partner = hwc_good_practice_exchange_node_get_workbench_partner($item);
  if (!$partner) {
    return -1;
  }
  return $partner->nid;
}

/**
 * Document partner section check.
 */
function hwc_good_practice_exchange_node_get_workbench_section($item) {
  if ($item->type != 'document') {
    return '';
  }
  $q = db_select('workbench_access_node', 'w');
  $q->fields('w', ['access_id'])
    ->condition('w.nid', $item->nid);
  $access_id = $q->execute()->fetchField();
  return ($access_id == 'section') ? 1 : 0;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function hwc_good_practice_exchange_entity_property_info_alter(&$info) {
  $info['node']['properties']['partner_category_type'] = array(
    'type' => 'integer',
    'label' => t('Document Partner Category Type'),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_good_practice_exchange_node_get_partner_category_type',
  );
  $info['node']['properties']['partner_organisation'] = array(
    'type' => 'integer',
    'label' => t('Document Partner Organisation'),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_good_practice_exchange_node_get_partner_organisation',
  );
  $info['node']['properties']['partner_section'] = array(
    'type' => 'integer',
    'label' => t('Document Partner Section'),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_good_practice_exchange_node_get_workbench_section',
  );

}

/**
 * Implements hook_block_info().
 */
function hwc_good_practice_exchange_block_info() {
  $blocks = array();
  $blocks['gpe_news_events'] = array(
    'info' => t('GPE news events'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['gpep_links'] = array(
    'info' => t('Good Practice Exchange Platform'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['gpep_document_links'] = array(
    'info' => t('Document edit/delete links'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['gpep_document_organisation'] = array(
    'info' => t('Document Organisation'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['gpepbacklink'] = array(
    'info' => t('Good Practice Exchange Platform back link'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

function hwc_good_practice_exchange_sort_form($form, $form_state) {
  $form = array();
  $form['sort_by'] = [
    '#type' => 'select',
    '#title' => t('Sort by'),
    '#default_value' => 'field_publication_date',
    '#options' => [
      'field_publication_date' => t('Date of publication'),
      'title2' => t('Alphabetically'),
    ],
  ];
  $form['sort_order'] = [
    '#type' => 'select',
    '#title' => t('Order'),
    '#default_value' => 'DESC',
    '#options' => [
      'DESC' => t('DESC'),
      'ASC' => t('ASC'),
    ],
  ];
  $form['sort_by']['#value'] = @$_REQUEST['sort_by'];
  $form['sort_order']['#value'] = @$_REQUEST['sort_order'];
  return $form;
}

/**
 * Implements hook_views_post_render().
 */
function hwc_good_practice_exchange_views_post_render(&$view, &$output, &$cache) {
  if ($view->name == 'documents') {
    drupal_add_js(drupal_get_path('module', 'hwc_good_practice_exchange') . '/sort.js', array('weight' => 20));
    $form = drupal_get_form('hwc_good_practice_exchange_sort_form');
    $order_html = '<div class="sort-container col-xs-3">' . drupal_render($form) . '</div><span class="count-container pull-right">';
    $no_results = TRUE;
    if (strpos($output, '@order')) {
      $no_results = FALSE;
    }
    $output = trim(str_replace('@order', $order_html, $output)) . '</span>';
    if (
      ($view->current_display == 'page_1')
      ||
      ($view->current_display == 'gpep')
    ) {
      $link = l(t('New Document'), 'node/add/document');
      if ($no_results) {
        $output = str_replace('<div class="view-header">', '<div class="view-header"><span class="no-results count-container pull-right">', $output);
      }
      $output = trim(str_replace('__add_new_document_link__', $link, $output)) . '</span>';
    }
  }
}

/**
 * Implements hook_block_save().
 */
function hwc_good_practice_exchange_block_save($delta = '', $edit = []) {
  if ($delta == 'gpep_links') {
    variable_set('hwc_gpep_document_intro_text', $edit['hwc_gpep_document_intro_text']);
  }
}

/**
 * Implements hook_block_configure().
 */
function hwc_good_practice_exchange_block_configure($delta = '') {
  $form = [];
  if ($delta == 'gpep_links') {
    $form['hwc_gpep_document_intro_text'] = array(
      '#type' => 'textarea',
      '#title' => t('Introductory text'),
      '#size' => 60,
      '#description' => 'This text will appear as an introductory text.',
      '#default_value' => variable_get('hwc_gpep_document_intro_text', ''),
    );
  }
  return $form;
}

/**
 * Implements hook_theme().
 */
function hwc_good_practice_exchange_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['gpe_news_events'] = array(
    'variables' => array(
      'news' => '',
      'events' => '',
    ),
    'template' => 'templates/gpe_news_events',
  );
  $theme['hwc_good_practice_exchange_platform'] = array(
    'template' => 'templates/hwc_good_practice_exchange_platform',
    'variables' => array(
      'links' => [],
      'title' => '',
      'back_link' => '',
      'intro_text' => '',
    ),
  );
  return $theme;
}

/**
 * Implements hook_block_view().
 */
function hwc_good_practice_exchange_block_view($delta = '') {
  $block = array();

  if ($delta == 'gpe_news_events' && !variable_get('splash_mode', FALSE)) {
    $news = block_load('views', 'news-gpe');
    $array = _block_get_renderable_array(_block_render_blocks([$news]));
    if (hwc_gpe_news()) {
      $news = render($array);
    }
    else {
      $news = '';
    }

    $events = block_load('views', 'frontpage_events-gpe');
    $array = _block_get_renderable_array(_block_render_blocks([$events]));
    if (hwc_gpe_events()) {
      $events = render($array);
    }
    else {
      $events = '';
    }
    if ($news || $events) {
      $block['content'] = theme('gpe_news_events', ['events' => $events, 'news' => $news]);
    }
  }

  if ($delta == 'gpep_document_links') {
    $link = '';
    $node = menu_get_object('node');

    $destination = 'good-practice-exchange-platform';
    if ($node && node_access('update', $node)) {
      $link = l(t('Edit'), 'node/' . $node->nid . '/edit', ['query' => ['destination' => $destination], 'absolute' => TRUE]);
    }
    if ($node && node_access('delete', $node)) {
      $link .= ' ' . l(t('Delete'), 'node/' . $node->nid . '/delete', ['query' => ['destination' => $destination], 'absolute' => TRUE]);
    }
    $block['subject'] = '';
    $block['content']['#markup'] = '<div class="gpep-edit-button">' . $link . '</div>';
  }

  if ($delta == 'gpepbacklink') {
    $block['subject'] = '';
    $link_href = 'good-practice-exchange-platform';
    $link_title = '<img alt="back page" src="/' . THEME_IMAGES_PATH . '/pag-back.png"><span>' . t('Back to the Good practice exchange platform') . '</span>';
    $block['content'] = '<div class="publication-detail" style="overflow: auto;"><div class="back-to-publications">' . l($link_title, $link_href, ['html' => TRUE]) . '</div></div>';
  }

  if ($delta == 'gpep_document_organisation') {
    $title = '';
    $node = menu_get_object('node');
    if ($node) {
      $partner = hwc_good_practice_exchange_node_get_workbench_partner($node);
      if ($partner) {
        $wrapper = entity_metadata_wrapper('node', $partner);
        $title = $wrapper->title->value();
      }
    }
    $block['subject'] = '';
    $block['content']['#markup'] = '<div class="gpep-organisation"><div class="col-xs-12 col-sm-12">' . $title . '</div></div>';
  }


  if ($delta == 'gpep_links') {

    $links = [];
    $node = menu_get_object('node');
    $intro_text = variable_get('hwc_gpep_document_intro_text', '');
    $title = t('Good practice exchange platform');
    $back_link = l(t('Back'), 'node/' . $node->nid);

    $block['subject'] = '';
    $block['content'] = theme('hwc_good_practice_exchange_platform',
      array(
        'links' => $links,
        'title' => $title,
        'back_link' => $back_link,
        'intro_text' => $intro_text,
      )
    );
  }

  return $block;
}
