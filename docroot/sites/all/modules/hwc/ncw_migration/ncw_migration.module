<?php

module_load_include('inc', 'ncw_migration', 'ncw_migration.admin');

/**
 * Implements hook_menu().
 */
function ncw_migration_menu() {
  $items = array();
  $items['admin/config/system/ncw_migration'] = array(
    'title' => 'EU-OSHA synchronization notification',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ncw_migration_admin_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements Elysia hook_cronapi().
 */
function ncw_migration_cronapi() {
  return array(
    'ncw_migration_cron' => array(
      'description' => 'Migrate NCW content',
      'rule' => '0 3 * * *',
    ),
    'ncw_migration_synchronisation_notification_cron' => array(
      'description' => 'Send synchronisation notification',
      'rule' => '0 9 * * *',
    ),

  );
}

/**
 */
function ncw_migration_synchronisation_notification_cron() {
  $language = language_default();
  $stuck = [];
  $outdated = [];
  $max_hours = intval(variable_get('ncw_migration_synchronisation_notification_hours', 12));
  foreach (migrate_migrations() as $machine_name => $meta) {
    $migration = MigrationBase::getInstance($machine_name);
    if ($group = $migration->getGroup()) {
      if ('ncw' != $group->getName()) {
        continue;
      }
    }
    $last_imported = db_select('migrate_log', 'ml')
      ->fields('ml', array('endtime'))
      ->condition('machine_name', $machine_name)
      ->isNotNull('endtime')
      ->orderBy('endtime', 'DESC')
      ->execute()
      ->fetchField();

    if (MigrationBase::STATUS_IDLE == $migration->getStatus()) {
      $hours = (time() - ($last_imported / 1000)) / 3600;
      if ($last_imported && $hours > $max_hours) {
        drupal_set_message($machine_name . ' date = ' . date('Y-m-d H:i:s', ($last_imported / 1000)) .', hours = ' . $hours);
        $outdated[] = $machine_name;
      }
    }
    else {
      $stuck[] = $machine_name;
    }
  }
  watchdog('synchronisation_notification',
    '[ncw_migration] Stat: outdated = !outdated, stuck = !stuck',
    array('!outdated' => count($outdated), '!stuck' => count($stuck)), WATCHDOG_INFO);
  $mails = [];
  $default_value = variable_get('ncw_migration_synchronisation_mails', '');
  if ($default_value) {
    $mails = explode("\n", $default_value);
  }
  if (empty($mails)) {
    watchdog('synchronisation_notification',
      '[ncw_migration] There are no users to notify about synchronisation problems.', array(), WATCHDOG_ERROR);
    drupal_set_message('There are no users to notify about synchronisation problems.', 'warning');
    return;
  }
  if ($outdated || $stuck) {
    $message = array('result' => TRUE);
    foreach ($mails as $mail) {
      $params['outdated'] = $outdated;
      $params['stuck'] = $stuck;
      $message = drupal_mail('ncw_migration', 'ncw_migration_synchronisation', $mail, $language, $params);
      if ($message['result'] === FALSE) {
        break;
      }
    }
    if ($message['result'] === FALSE) {
      watchdog('synchronisation_notification',
        '[ncw_migration] Error sending notification',
        array(), WATCHDOG_ERROR);
    }
    else {
      watchdog('synchronisation_notification',
        '[ncw_migration] Notification sent',
        array(), WATCHDOG_INFO);
    }
  }
}

/**
 * Implements hook_mail().
 */
function ncw_migration_mail($key, &$message, $params) {
  switch ($key) {
    case 'ncw_migration_synchronisation':
      $subject = variable_get('ncw_migration_template_synchronisation_subject', '');
      $body = variable_get('ncw_migration_template_synchronisation_body', '');
      $stuck = implode(', ', $params['stuck']);
      $outdated = implode(', ', $params['outdated']);
      $stuck_info = '';
      $outdated_info = '';
      if ($stuck) {
        $stuck_info = 'Stuck = ' . $stuck;
      }
      if ($outdated) {
        $outdated_info = 'Outdated = ' . $outdated;
      }
      $body = str_replace('[stuck]', $stuck, $body);
      $body = str_replace('[outdated]', $outdated, $body);
      $body = str_replace('[stuck_info]', $stuck_info, $body);
      $body = str_replace('[outdated_info]', $outdated_info, $body);
      $message['subject'] = token_replace($subject, $params);
      $message['body'][] = token_replace($body, $params);
      break;
  }
}

/**
 * Implements hook_cron().
 */
function ncw_migration_cron() {
  include_once 'ncw_migration.drush.inc';
  drush_ncw_migration_hwc_migrate_all();
  drush_ncw_migration_hwc_migrate_av_related();
}

/**
 * List of bundles periodically updated from the corporate website.
 * @return array
 *   Array of bundles
 */
function ncw_migration_get_migrated_bundles() {
  return array(
    'publication', 'events', 'news', 'note_to_editor', 'press_contact',
    'press_release', 'infographics', 'practical_tool', 'flickr-gallery',
  );
}

/**
 * @param string $machine_name
 *   Migration machine name
 *
 * @return boolean
 *   Returns TRUE if migration was successful
 *
 * @throws \Exception
 */
function ncw_migration_run_single($machine_name) {
  migrate_static_registration(array($machine_name));
  /** @var Migration $migration */
  $migration = Migration::getInstance($machine_name);
  $migration->prepareUpdate();
  $result = $migration->processImport();
  if ($result == MigrationBase::RESULT_COMPLETED) {
    watchdog(
      'ncw_migration',
      '[CRON](machine:!machine_name) finished successfully ',
      array('!machine_name' => $machine_name)
    );
    return TRUE;
  }
  else {
    watchdog(
      'ncw_migration',
      '[CRON]Last CW import did not finished successfully (machine:!machine_name)',
      array('!machine_name' => $machine_name)
    );
    return FALSE;
  }
}

function ncw_migration_debug($message, $message_args = array(), $level = 'notice') {
  if (function_exists('drush_get_option')) {
    // Message appear when running 'drush -d migrate-import events'.
    if ($debug = drush_get_option('debug')) {
      $str = format_string($message, $message_args);
      drush_log($str, $level);
    }
  }
}
